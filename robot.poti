use "jerimum"


tipo Robot
  var x, y, escala: Real
  var exibir := esperaimg[1]
  var efeito := efeito_ataqueimg[1]
  var z_x := 960.0
  var z_pontos := 0
  var z_dano := 10

  var z_vida := "vivo"

  var tempo1 := 0.0
  var position := x+100
  position_inicial = x + 100
  var tempo_inicial := 0.0
  ######### Functions/Comands #########

  normalefeito()
    se y < y_base entao
      y := y + 7.0
    fim
  fim

  esperar()
    n = (Relogio.agora div 120 mod esperaimg.tamanho + 1).inteiro
    exibir := esperaimg[n]
    normalefeito
  fim

  ##### SAlto funciona com um jatpack e pode ser usado junto com outras funções!####

  salto()
    se y > y_base - (556 * escala) entao
      y := y - 5.0
      n = (Relogio.agora div 120 mod saltoimg.tamanho + 1).inteiro
      exibir := saltoimg[n]
    fim
    se Teclado.TECLA_ESPACO então
      n = (Relogio.agora div 120 mod ataquesaltoimg.tamanho + 1).inteiro
      exibir := ataquesaltoimg[n]
      se n == 4 e x + 90 > z_x e x + 5 < z_x entao
        z_pontos := z_pontos + 1
      fim
      efeito_ataque
    fim
    se Teclado.TECLA_PARA_DIREITA então
      se x + 567 * escala < jogo.largura entao
        x := x + 4.0
      fim
    fim
    se Teclado.TECLA_PARA_ESQUERDA entao
      se x > 0 - 10 entao
        x := x - 3.0
      fim
    fim
    se Teclado.TECLA_T então
      n = (Relogio.agora div 90 mod saltoatiraimg.tamanho + 1).inteiro
      exibir := saltoatiraimg[n]
      tiro
    fim
  fim
  # mover para a direita x +
  correr()
    se x + 567 * escala < jogo.largura entao
      x := x + 4.0
      n = (Relogio.agora div 90 mod correrimg.tamanho + 1).inteiro
      exibir := correrimg[n]
    fim
    se Teclado.TECLA_T então
      n = (Relogio.agora div 90 mod correatiraimg.tamanho + 1).inteiro
      exibir := correatiraimg[n]
      tiro
    fim
    normalefeito
  fim
  # mover para a esquerda x -
  recuar()
    se x > 0 - 10 entao
      x := x - 3.0
      n = (Relogio.agora div 240 mod correrimg.tamanho + 1).inteiro
      exibir := correrimg[n]
    fim
    se Teclado.TECLA_T então
      n = (Relogio.agora div 90 mod correatiraimg.tamanho + 1).inteiro
      exibir := correatiraimg[n]
      tiro
    fim
    normalefeito
  fim

  rasteira()
    n = (Relogio.agora div 90 mod rasteiraimg.tamanho + 1).inteiro
    exibir := rasteiraimg[n]
    se x + 567 * escala < jogo.largura entao
      x := x + 3.0
    fim
    normalefeito
  fim

  ataque_a()
      n = (Relogio.agora div 80 mod ataqueimg.tamanho + 1).inteiro
      exibir := ataqueimg[n]
      normalefeito
      se n == 4 e x + 90 > z_x e x + 5 < z_x entao
        z_pontos := z_pontos + 1
      fim
      efeito_ataque
  fim


  morrer()
    n = (Relogio.agora div 90 mod morrerimg.tamanho + 1).inteiro
    exibir := morrerimg[n]
    normalefeito
  fim

  var exibirtiro := tiroimg[1]
  var x_tiro := x + 100
  var y_tiro := y + 50


#efeito ataque aqui
  efeito_ataque()
    n2 = (Relogio.agora div 60 mod efeito_ataqueimg.tamanho + 1).inteiro
    efeito := efeito_ataqueimg[n2]
  fim

#Efeito tiro aqui
  tiro()
    n = (Relogio.agora div 120 mod tiroimg.tamanho + 1).inteiro
    exibirtiro := tiroimg[n]
    #atualizando para mudar o position em função do tempo.
    se x < z_x então
      tempo1 := tempo1 + 1.0/60.0
      se tempo1 >= tempo_inicial + 0.04 então #quanto menor o tempo mais rápido o tiro vai
        position := position +20
        tempo_inicial := tempo1
      fim

      se position >= z_x e position < z_x + 20 então
        z_pontos := z_pontos + aleatorio(10)
        position := x
      fim
    senãose x > z_x + 20 então
      tempo1 := tempo1 + 1.0/60.0
      se tempo1 >= tempo_inicial + 0.04 então #quanto menor o tempo mais rápido o tiro vai
        position := position +20
        tempo_inicial := tempo1
      fim
      se position >= 960 então
        position := x
      fim
    fim
  fim

  atirar()
    n = (Relogio.agora div 120 mod atiraimg.tamanho + 1).inteiro
    exibir := atiraimg[n]
    tiro
    normalefeito
  fim

  #dano do robô ao zumbi!!
  retorno_robot()
    se z_pontos < 10 entao
      z_dano := 10
    senãose z_pontos < 10 * 2 então
      z_dano := 9
    senãose z_pontos < 10 * 3 então
      z_dano := 8
    senãose z_pontos < 10 * 4 então
      z_dano := 7
    senãose z_pontos < 10 * 5 então
      z_dano := 6
    senãose z_pontos < 10 * 6 então
      z_dano := 5
    senãose z_pontos < 10 * 7 então
      z_dano := 4
    senãose z_pontos < 10 * 8 então
      z_dano := 3
    senãose z_pontos < 10 * 9 então
      z_dano := 2
    senãose z_pontos < 10 * 10 então
      z_dano := 1
    senao
      z_vida := "morto"
    fim
    #se position >= zumbi.x então
    #  z_dano := z_dano -2
    #fim
    z_dano
  fim

  retorno_vida()
    z_vida
  fim






  desenhe()
    exibir.desenhe(x, y, 1, 0, escala, escala)
    se Teclado.TECLA_T então
      #tinha esquecido de atualizar a variavel x_tiro e y_tiro, por isso que troquei
      exibirtiro.desenhe(x + position, y + 55, 1, 5.0, escala, escala)
    fim
    se Teclado.TECLA_ESPACO então
      efeito.desenhe(x + 100, y - 20, 1, 0.0, 1,1)
    fim
  fim
  ######### Keys for play #########

  atualize()
    se Teclado.TECLA_PARA_CIMA entao
      salto
    senãose Teclado.TECLA_PARA_DIREITA então
      correr
    senãose Teclado.TECLA_PARA_ESQUERDA então
      recuar
    senãose Teclado.TECLA_ESPACO então
      ataque_a
    senãose Teclado.TECLA_T então
      atirar
    senãose Teclado.TECLA_PARA_BAIXO então
      rasteira
    senãose Teclado.TECLA_Y então
      morrer
    senão
      esperar
    fim
  fim
fim
